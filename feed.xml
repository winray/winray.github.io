<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Winray Blog</title>
    <description>For study!</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 16 Mar 2016 00:16:42 +0800</pubDate>
    <lastBuildDate>Wed, 16 Mar 2016 00:16:42 +0800</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>进程间通信</title>
        <description>&lt;h6 id=&quot;section&quot;&gt;进程间通信&lt;/h6&gt;
&lt;blockquote&gt;
  &lt;p&gt;进程间通信（IPC，Interprocess communication）是一组编程接口，让程序员能够协调不同的程序进程，使之能在一个操作系统里同时运行。这使得一个程序能够在同一时间里处理许多用户的要求。因为即使只有一个用户发出要求，也可能导致一个操作系统中多个进程的运行，进程之间必须互相通话。IPC接口就提供了这种可能性。每个IPC方法均有它自己的优点和局限性，因此，对于单个程序而言使用所有的IPC方法是不常见的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h6 id=&quot;linux&quot;&gt;linux下进程间通信的几种主要手段简介：&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;管道（&lt;code class=&quot;highlighter-rouge&quot;&gt;Pipe&lt;/code&gt;）及有名管道（&lt;code class=&quot;highlighter-rouge&quot;&gt;named pipe&lt;/code&gt;）：管道可用于具有亲缘关系进程间的通信，有名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信；
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls | pr | lpr&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;管道是单向的、先进先出的、无结构的、固定大小的字节流，它把一个进程的标准输出和另一个进程的标准输入连接在一起。写进程在管道的尾端写入数据，读进程在管道的首端读出数据。数据读出后将从管道中移走，其它读进程都不能再读到这些数据。管道提供了简单的流控制机制。进程试图读空管道时，在有数据写入管道前，进程将一直阻塞。同样，管道已经满时，进程再试图写管道，在其它进程从管道中移走数据之前，写进程将一直阻塞。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;信号（&lt;code class=&quot;highlighter-rouge&quot;&gt;Signal&lt;/code&gt;）：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身；linux除了支持Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上，该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，用sigaction函数重新实现了signal函数）；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;报文（&lt;code class=&quot;highlighter-rouge&quot;&gt;Message&lt;/code&gt;）队列（消息队列）：消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺点。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;共享内存：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;信号量（&lt;code class=&quot;highlighter-rouge&quot;&gt;semaphore&lt;/code&gt;）：主要作为进程间以及同一进程不同线程之间的同步手段。
    &lt;ul&gt;
      &lt;li&gt;信号量(&lt;code class=&quot;highlighter-rouge&quot;&gt;Semaphore&lt;/code&gt;)，有时被称为信号灯，是在多线程环境下使用的一种设施，是可以用来保证两个或多个关键代码段不被并发调用。在进入一个关键代码段之前，线程必须获取一个信号量；一旦该关键代码段完成了，那么该线程必须释放信号量。其它想进入该关键代码段的线程必须等待直到第一个线程释放信号量。为了完成这个过程，需要创建一个信号量VI，然后将Acquire Semaphore VI以及Release Semaphore VI分别放置在每个关键代码段的首末端。确认这些信号量VI引用的是初始创建的信号&lt;/li&gt;
      &lt;li&gt;互斥量是信号量的一个特例，信号量的引用计数为n，而互斥量为1，信号量有一个等待队列，当信号量引用计数大于0时就唤醒等待队列上的线程可以访问资源；&lt;/li&gt;
      &lt;li&gt;临界区是你需要用信号量，互斥量或锁保护的一段代码，避免多个线程并发的访问处于同一个临界区中的资源；&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;套接口（&lt;code class=&quot;highlighter-rouge&quot;&gt;Socket&lt;/code&gt;）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix系统上：Linux和System V的变种都支持套接字。&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;section-1&quot;&gt;注意&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;一般来说，linux下的进程包含以下几个关键要素：
    &lt;ul&gt;
      &lt;li&gt;有一段可执行程序；&lt;/li&gt;
      &lt;li&gt;有专用的系统堆栈空间；&lt;/li&gt;
      &lt;li&gt;内核中有它的控制块（进程控制块），描述进程所占用的资源，这样，进程才能接受内核的调度；&lt;/li&gt;
      &lt;li&gt;具有独立的存储空间&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;进程和线程有时候并不完全区分，而往往根据上下文理解其含义。&lt;/li&gt;
  &lt;li&gt;进程间通信与线程间通信之间的关系?
    &lt;ul&gt;
      &lt;li&gt;因为WINDOWS运行的实体是线程, 狭义上的进程间通信其实是指分属于不同进程的线程之间的通讯.而单个进程之间的线程同步问题可归并为一种特殊的进程通信.它要用到内核支持的系统调用来保持线程之间同步. 通常用到的一些线程同步方法包括:Event, Mutex,信号量Semaphore,临界区资源等.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;section-2&quot;&gt;参考&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ibm.com/developerworks/cn/linux/l-ipc/&quot;&gt;https://www.ibm.com/developerworks/cn/linux/l-ipc/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://baike.baidu.com/view/1492468.htm&quot;&gt;http://baike.baidu.com/view/1492468.htm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Tue, 15 Mar 2016 00:00:00 +0800</pubDate>
        <link>/2016/03/15/thread/</link>
        <guid isPermaLink="true">/2016/03/15/thread/</guid>
        
        <category>操作系统</category>
        
        
      </item>
    
      <item>
        <title>经典排序算法（二）</title>
        <description>&lt;h6 id=&quot;section&quot;&gt;堆排序&lt;/h6&gt;
&lt;blockquote&gt;
  &lt;p&gt;堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;概述
    &lt;ul&gt;
      &lt;li&gt;建立N个元素的二叉堆，这个阶段花费O(N)时间&lt;/li&gt;
      &lt;li&gt;然后执行N次deleteMin操作&lt;/li&gt;
      &lt;li&gt;按照顺序，最小的元素先离开堆&lt;/li&gt;
      &lt;li&gt;通过将这些记录到第二个数组然后再将数组拷贝回来，得到N个元素排序&lt;/li&gt;
      &lt;li&gt;由于每个deleteMin花费O(logN)时间，因此总的运行时间是O(NlogN).&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;堆节点的访问
    &lt;ul&gt;
      &lt;li&gt;通常堆是通过一维数组来实现的。在数组起始位置为0的情形中：&lt;/li&gt;
      &lt;li&gt;父节点i的左子节点在位置(2*i+1);&lt;/li&gt;
      &lt;li&gt;父节点i的右子节点在位置(2*i+2);&lt;/li&gt;
      &lt;li&gt;子节点i的父节点在位置floor((i-1)/2)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void maxHeapify(int arr[], int start, int end) {
      //建立父节点指标和子节点指标 
      int dad = start;
      int son = dad * 2 + 1;

      //若子节点指标在范围内才做出调整 
      while (son &amp;lt; end) {
          //先比较两个子节点大小，选择最大的 
          if (son + 1 &amp;lt; end &amp;amp;&amp;amp; arr[son] &amp;lt; arr[son + 1])
              son++;

          //如果父节点大于子节点代表调整完毕，直接跳出函数 
          //否则父节点内容再继续子节点和孙节点比较 
          if (arr[dad] &amp;gt; arr[son])
              return;
          else {
              swap(arr[dad], arr[son]);
              dad = son;
              son = dad * 2 + 1;
          }
      }
  }

  void heapSort(int test[], int len) {
      //初始化，i从最后一个父节点开始调整 
      for (int i = len/2 - 1; i &amp;gt;= 0; --i) {
          maxHeapify(test, i, len);
      }
      for (int i = len-1; i &amp;gt; 0; --i) {
          swap(test[0], test[i]);
          maxHeapify(test, 0, i);
      }
  }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;section-1&quot;&gt;归并排序&lt;/h6&gt;
&lt;blockquote&gt;
  &lt;p&gt;归并排序以O(NlogN)为最坏情形运行时间，而所使用的比较次数几乎是最优的。它是递归算法的一个很好的例子。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;概述
    &lt;ul&gt;
      &lt;li&gt;基本操作是合并两个已排序的表&lt;/li&gt;
      &lt;li&gt;因为两个表是有序的，所以若将输出放到第三个表中则该算法可以通过对输入数据一趟排序来完成。&lt;/li&gt;
      &lt;li&gt;采用分治策略，将问题&lt;code class=&quot;highlighter-rouge&quot;&gt;分&lt;/code&gt;成一些小的问题然后递归求解，而&lt;code class=&quot;highlighter-rouge&quot;&gt;治&lt;/code&gt;的阶段则是将分的阶段解的各答案修补在一起。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; void mergeSortR(int arr[], int tmp[], int start, int end) {
      if (start &amp;gt;= end)
          return;
      int len = end-start,
          mid = (len&amp;gt;&amp;gt;1)+start;
      //左边排序 
      int start1 = start, end1 = mid;
      //右边排序 
      int start2 = mid+1, end2 = end;
      mergeSortR(arr, tmp, start1, end1);
      mergeSortR(arr, tmp, start2, end2);

      //第三方数组的记录 
      int k = start;

      //两个数组比较排序 
      while (start1 &amp;lt;= end1 &amp;amp;&amp;amp; start2 &amp;lt;= end2)
          tmp[k++] = arr[start1] &amp;lt; arr[start2] ? arr[start1++] : arr[start2++];
      while (start1 &amp;lt;= end1)
          tmp[k++] = arr[start1++];
      while (start2 &amp;lt;= end2)
          tmp[k++] = arr[start2++];

      //第三方数组重新复制给原数组 
      for (k = start; k &amp;lt;= end; ++k)
         arr[k] = tmp[k];
  }

  void mergeSort(int arr[], int len) {
      int tmp[len] ;
      mergeSortR(arr, tmp, 0, len-1);
  }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;section-2&quot;&gt;快速排序&lt;/h6&gt;
&lt;blockquote&gt;
  &lt;p&gt;像归并排序一样，快速排序也是一种分治的递归算法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;概述
    &lt;ul&gt;
      &lt;li&gt;选取枢纽元
        &lt;ul&gt;
          &lt;li&gt;安全的方针是随机选取枢纽元。&lt;/li&gt;
          &lt;li&gt;或者三数中值分割法，选取左端和中心位置上的三个元素的中值作为枢纽元。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;分割
        &lt;ul&gt;
          &lt;li&gt;把枢纽元与最后的元素交换&lt;/li&gt;
          &lt;li&gt;i从第一个元素开始，而j从倒数第二个元素开始&lt;/li&gt;
          &lt;li&gt;把小元素推向左边，大元素推向右边&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void quickSortR(int arr[], int start, int end) {
      if (start &amp;gt;= end)
          return;
      int mid = arr[end];
      int left  = start,
          right = end-1;
      while (left &amp;lt; right) {
          while (arr[left] &amp;lt; mid &amp;amp;&amp;amp; left &amp;lt; right)
              left++;
          while (arr[right] &amp;gt;= mid &amp;amp;&amp;amp; left &amp;lt; right)
              right--;
          swap(arr[left], arr[right]);
      }
      if (arr[left] &amp;gt;= arr[end])
          swap(arr[left], arr[end]);
      else
          ++left;
      quickSortR(arr, start, left-1);
      quickSortR(arr, left+1, end);
  }

  void quickSort(int arr[], int len) {
      quickSortR(arr, 0, len-1);
  }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 06 Mar 2016 00:00:00 +0800</pubDate>
        <link>/2016/03/06/algorithm/</link>
        <guid isPermaLink="true">/2016/03/06/algorithm/</guid>
        
        <category>算法</category>
        
        <category>c++</category>
        
        
      </item>
    
      <item>
        <title>经典排序算法（一）</title>
        <description>&lt;h5 id=&quot;section&quot;&gt;概述&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;排序&lt;/strong&gt;是计算机程序设计中的一种重要操作，简单的说，可以使任意序列重新排列成一个按关键字有序的序列。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;好处：
    &lt;ul&gt;
      &lt;li&gt;有序顺序可以采用查找效率较高的折半查找法&lt;/li&gt;
      &lt;li&gt;有如建造数表（无论是二叉树还是B-树）的过程本身就是一个排序的过程&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;section-1&quot;&gt;稳定与否&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;若两个相等数，在排序前与排序后的顺序相同，则是稳定的排序，否则是不稳定的。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;eg：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;假设:	 a = b
稳定:	 a, b --&amp;gt;  a, b
不稳定:  a, b --&amp;gt;  b, a
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;section-2&quot;&gt;内（/外）部排序&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;内部排序：指的是带排序的记录存放在计算机存储器中进行的排序过程
    &lt;ul&gt;
      &lt;li&gt;插入排序&lt;/li&gt;
      &lt;li&gt;交换排序&lt;/li&gt;
      &lt;li&gt;选择排序&lt;/li&gt;
      &lt;li&gt;归并排序&lt;/li&gt;
      &lt;li&gt;计数排序&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;外部排序：指的是带排序的记录数量很大，以致内存一次不能容纳全部记录，在排序过程中尚需对外存进行访问的排序过程。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;section-3&quot;&gt;两种基本操作&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;比较两个关键字的大小&lt;/li&gt;
  &lt;li&gt;将记录从一个位置移动至另外一个记录&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;section-4&quot;&gt;排序算法&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;下面正式介绍各种排序算法&lt;/li&gt;
  &lt;li&gt;都是从小到大排序&lt;/li&gt;
  &lt;li&gt;以整形为例&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;section-5&quot;&gt;插入排序&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;直接插入排序，是一种最简单的排序方法&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;基本操作是将一个记录插入到已排好的有序表中从而得到一个新的、记录数增1的有序表。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insertSort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;c1&quot;&gt;//把比插入元素大的元素后移 
&lt;/span&gt;              &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;//找打合适位置插入 
&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;section-6&quot;&gt;希尔排序&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;插入排序改进版&lt;/li&gt;
  &lt;li&gt;改进：
    &lt;ul&gt;
      &lt;li&gt;通过比较相距一定间隔的元素来工作；&lt;/li&gt;
      &lt;li&gt;随着每一趟比较所用的距离随着算法的进行而减小；&lt;/li&gt;
      &lt;li&gt;直到只比较相邻元素的最后一趟排序位置。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;为此，希尔排序有时也叫缩减增量排序。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void shellSort(int test[], int len) {
  for (int gap = len/2; gap &amp;gt; 0; gap /= 2) {
      //选取步长 
      for (int i = gap; i &amp;lt; len; i++) {
          //以步长进行的选择排序 
          int tmp = test[i], j;
          for (j = i; j &amp;gt;= gap &amp;amp;&amp;amp; tmp &amp;lt; test[j-gap]; j -= gap) {
              test[j] = test[j-gap];
          }
          //找到合适位置插入 
          test[j] = tmp;
      }
  }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;section-7&quot;&gt;冒泡排序&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;每一轮都把这轮的最大放到最后的位置&lt;/li&gt;
  &lt;li&gt;如：
    &lt;ul&gt;
      &lt;li&gt;第一轮把最大的数字放到最后一位&lt;/li&gt;
      &lt;li&gt;第二轮把最大的数字放到倒数第二位&lt;/li&gt;
      &lt;li&gt;第三轮把最大的数字放到倒数第三位&lt;/li&gt;
      &lt;li&gt;以此类推&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void bubbleSort(int test[], int len) {
  for (int i = 1; i &amp;lt; len; i++) {
      //每一轮都把这轮最大的数放到（‘len-i’位置）
      for (int j = 0; j &amp;lt; len-i; j++) {
          if (test[j] &amp;gt; test[j+1]) {
              int tmp = test[j+1];
              test[j+1] = test[j];
              test[j] = tmp;			
          }
      }
  }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&quot;section-8&quot;&gt;选择排序&lt;/h6&gt;
&lt;ul&gt;
  &lt;li&gt;类似冒泡排序&lt;/li&gt;
  &lt;li&gt;但是交换次数减少，因为冒泡排序是通过每一次交换把数字替换，而选择排序是选出最小一位再交换，效果更好&lt;/li&gt;
  &lt;li&gt;找到每一轮的最小元素，然后替换，直到最后排序完成&lt;/li&gt;
  &lt;li&gt;如：
    &lt;ul&gt;
      &lt;li&gt;第一轮把最小的数字放到第一位&lt;/li&gt;
      &lt;li&gt;第二轮把最小的数字放到第二位&lt;/li&gt;
      &lt;li&gt;第三轮把最小的数字放到第三位&lt;/li&gt;
      &lt;li&gt;以此类推。&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void selectSort(int test[], int len) {
  for (int i = 0; i &amp;lt; len; ++i) {
      //记录当前为最小元素 
      int index = i;
      //找到最小元素 
      for (int j = i+1; j &amp;lt; len; ++j) {
          if (test[j] &amp;lt; test[index]) {
              index = j;
          }
      }
      //如果找到的最小元素比记录的最小元素要小，那么替换当前最小元素 
      if (index != i) {
          int tmp = test[index];
          test[index] = test[i];
          test[i] = tmp;
      }
  }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 05 Mar 2016 00:00:00 +0800</pubDate>
        <link>/2016/03/05/algorithm/</link>
        <guid isPermaLink="true">/2016/03/05/algorithm/</guid>
        
        <category>算法</category>
        
        <category>c++</category>
        
        
      </item>
    
      <item>
        <title>Sicily 1034. Forest</title>
        <description>&lt;ul&gt;
  &lt;li&gt;思路：
    &lt;ul&gt;
      &lt;li&gt;网上很多说用深搜，很任性…….发现广搜也挺好用的，实验课打的(⊙o⊙)…orz……..囧。&lt;/li&gt;
      &lt;li&gt;先找根结点，根据根结点广搜深度，广搜宽度，不过要开一个数组，同一层的累加宽度。别忘了要判断是否合法。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具体代码如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;cstring&amp;gt;
#include &amp;lt;queue&amp;gt;
using namespace std;

bool path[101][101];
bool visited[101];
bool Root[101];

int main()
{
    int n, m;
    while (cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m &amp;amp;&amp;amp; n)
    {
        memset(path, false, sizeof(path));
        memset(visited, false, sizeof(visited));
        memset(Root, true, sizeof(Root));

        bool flag = n &amp;gt; m ? true : false;
        for (int i = 1; i &amp;lt;= m; i++)
        {
            int node1, node2;
            cin &amp;gt;&amp;gt; node1 &amp;gt;&amp;gt; node2;
            if (node1 == node2) flag = false;
            path[node1][node2] = true;
        }
        if (flag == false) {
            cout &amp;lt;&amp;lt; &quot;INVALID\n&quot;;
            continue;
        }
        
        for (int i = 1; i &amp;lt;= n; i++)
            for (int j = 1; j &amp;lt;= n; j++)
                if (path[j][i])
                    Root[i] = false;
        int maxwidth = 0;
        for (int i = 1; i &amp;lt;= n; i++)
            if (Root[i]) {
                maxwidth++;
                visited[i] = true;
            }
        queue&amp;lt;int&amp;gt; store;
        int depth, maxdepth;
        maxdepth = depth = 0;
        int width[101] = {0};
        for (int i = 1; i &amp;lt;= n; i++)
        {
            if (Root[i])
            {
                store.push(i);
                depth = 0;
                while (!store.empty())
                {
                    int size = store.size();
                    width[depth] += size;
                    while (size--)
                    {
                        for (int j = 1; j &amp;lt;= n; j++)
                            if (path[store.front()][j])
                            {
                                if (!visited[j]) {
                                    store.push(j);
                                    visited[j] = true;
                                }
                                else
                                    flag = false;
                            }
                        store.pop();
                    }
                    if (!store.empty())
                        depth++;
                }
                maxdepth = depth &amp;gt; maxdepth ? depth : maxdepth;
            }
        }
        
        for (int i = 1; i &amp;lt;= n; i++)
            if (!visited[i]) {
                flag = false;
                break;
            }
        
        for (int i = 0; i &amp;lt;= maxdepth; i++)
            maxwidth = width[i] &amp;gt; maxwidth ? width[i] : maxwidth;
        
        flag == false ? cout &amp;lt;&amp;lt; &quot;INVALID&quot; : cout &amp;lt;&amp;lt; maxdepth &amp;lt;&amp;lt; &quot; &quot; &amp;lt;&amp;lt; maxwidth;
        cout &amp;lt;&amp;lt; endl;
    }

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 04 Mar 2016 00:00:00 +0800</pubDate>
        <link>/2016/03/04/sicily13/</link>
        <guid isPermaLink="true">/2016/03/04/sicily13/</guid>
        
        <category>sicily</category>
        
        <category>c++</category>
        
        
      </item>
    
      <item>
        <title>Sicily 1936. Knight Moves</title>
        <description>&lt;ul&gt;
  &lt;li&gt;思路：
    &lt;ul&gt;
      &lt;li&gt;这道题一开始不理解题意…orz…囧，看大神们理解的。&lt;/li&gt;
      &lt;li&gt;题意是说一个8*8的国际象棋，骑士以马的形式走动（“日”字型），指定两个点，输出最小的步骤。&lt;/li&gt;
      &lt;li&gt;可以利用广度搜索解决。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具体代码如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;queue&amp;gt;
#include &amp;lt;cstring&amp;gt;
#include &amp;lt;string&amp;gt;
using namespace std;

int dx[] = {-1, -2, -2, -1, 1, 2, 2, 1};    //可以走八个方向
int dy[] = {-2, -1, 1, 2, 2, 1, -1, -2};

bool visited[100];

int main() {
    int t;
    cin &amp;gt;&amp;gt; t;
    while (t--) {
        memset(visited, false, sizeof(visited));
        int distance[100] = {0};

        string node1, node2;
        cin &amp;gt;&amp;gt; node1 &amp;gt;&amp;gt; node2;

        int X = (node1[0]-&#39;a&#39;)*8 + node1[1]-&#39;1&#39;;
        int Y = (node2[0]-&#39;a&#39;)*8 + node2[1]-&#39;1&#39;;

        queue&amp;lt;int&amp;gt; store;
        store.push(X);
        while (!store.empty()) {
            if (store.front() == Y)
                break;

            int x = store.front()/8;
            int y = store.front()%8;

            for (int i = 0; i &amp;lt; 8; i++) {
                int nx = x+dx[i];
                int ny = y+dy[i];
                
                if (nx &amp;lt; 0||nx &amp;gt; 7||ny &amp;lt; 0||ny &amp;gt; 7)
                    continue;
                int temp = nx*8 + ny;
                
                if (!visited[temp]) {
                    store.push(temp);
                    visited[temp] = true;
                    distance[temp] = distance[store.front()] + 1;
                }
            }
            store.pop();
        }
        cout &amp;lt;&amp;lt; &quot;To get from &quot; &amp;lt;&amp;lt; node1
             &amp;lt;&amp;lt; &quot; to &quot; &amp;lt;&amp;lt; node2 &amp;lt;&amp;lt; &quot; takes &quot;
             &amp;lt;&amp;lt; distance[Y] &amp;lt;&amp;lt; &quot; knight moves.\n&quot;;
    }
    
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 04 Mar 2016 00:00:00 +0800</pubDate>
        <link>/2016/03/04/sicily12/</link>
        <guid isPermaLink="true">/2016/03/04/sicily12/</guid>
        
        <category>sicily</category>
        
        <category>c++</category>
        
        
      </item>
    
      <item>
        <title>Sicily shortest path in unweighted graph</title>
        <description>&lt;ul&gt;
  &lt;li&gt;题目介绍：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入一个无向图，指定一个顶点s开始bfs遍历，求出s到图中每个点的最短距离。

如果不存在s到t的路径，则记s到t的距离为-1。
 
Input
输入的第一行包含两个整数n和m，n是图的顶点数，m是边数。1&amp;lt;=n&amp;lt;=1000，0&amp;lt;=m&amp;lt;=10000。

以下m行，每行是一个数对v y，表示存在边(v,y)。顶点编号从1开始。 
 
Output
记s=1，在一行中依次输出：顶点1到s的最短距离，顶点2到s的最短距离，...，顶点n到s的最短距离。

每项输出之后加一个空格，包括最后一项。
 
Sample Input
5 3
1 2
1 3
2 4
Sample Output
0 1 1 2 -1 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;思路：
    &lt;ul&gt;
      &lt;li&gt;利用广度搜索，标记层数，依次计算距离即可。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具体代码如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;queue&amp;gt;
using namespace std;

bool path[1001][1001];
int shortest[1001];

int main() {
    int n, m;
    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    
    for (int i = 1; i &amp;lt;= m; i++) {
        int node1, node2;
        cin &amp;gt;&amp;gt; node1 &amp;gt;&amp;gt; node2;
        path[node1][node2] = true;
        path[node2][node1] = true;
    }
    
    for (int i = 1; i &amp;lt;= n; i++)
        i == 1 ? shortest[i] = 0 : shortest[i] = -1;
    
    int distance = 0;
    queue&amp;lt;int&amp;gt; store;
    store.push(1);
    while (!store.empty()) {
        int size = store.size();
        distance++;
        while (size--) {
            for (int i = 1; i &amp;lt;= n; i++) {
                if (path[store.front()][i] &amp;amp;&amp;amp; shortest[i] == -1) {
                    shortest[i] = distance;
                    store.push(i);
                }
            }
            store.pop();
        }
    }
    
    for (int i = 1; i &amp;lt;= n; i++)
        cout &amp;lt;&amp;lt; shortest[i] &amp;lt;&amp;lt; &quot; &quot;;
    cout &amp;lt;&amp;lt; endl;
    
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 04 Mar 2016 00:00:00 +0800</pubDate>
        <link>/2016/03/04/sicily11/</link>
        <guid isPermaLink="true">/2016/03/04/sicily11/</guid>
        
        <category>sicily</category>
        
        <category>c++</category>
        
        
      </item>
    
      <item>
        <title>Sicily connect components in undirected graph</title>
        <description>&lt;ul&gt;
  &lt;li&gt;题目介绍：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;输入一个简单无向图，求出图中连通块的数目。

Input
输入的第一行包含两个整数n和m，n是图的顶点数，m是边数。1&amp;lt;=n&amp;lt;=1000，0&amp;lt;=m&amp;lt;=10000。

以下m行，每行是一个数对v y，表示存在边(v,y)。顶点编号从1开始。
Output
单独一行输出连通块的数目。

Sample Input
5 3
1 2
1 3
2 4
Sample Output
2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;思路：
    &lt;ul&gt;
      &lt;li&gt;利用广度搜索，计算广度搜索的次数即为结果。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具体代码如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;queue&amp;gt;
using namespace std;

bool path[1001][1001];
bool visited[1001];

int main() {
    int n, m;
    cin &amp;gt;&amp;gt; n &amp;gt;&amp;gt; m;
    
    for (int i = 0; i &amp;lt; m; i++) {
        int node1, node2;
        cin &amp;gt;&amp;gt; node1 &amp;gt;&amp;gt; node2;
        path[node1][node2] = true;
        path[node2][node1] = true;
    }
    
    for (int i = 1; i &amp;lt;= n; i++) {
        visited[i] = false;
    }
    
    int count = 0;
    int temp = n;
    while (temp--) {
        queue&amp;lt;int&amp;gt; store;
        for (int i = 1; i &amp;lt;= n; i++) {
            if (!visited[i]) {
                store.push(i);
                count++;
                visited[i] = true;
                break;
            }
        }
        
        while (!store.empty()) {
            for (int i = 1; i &amp;lt;= n; i++) {
                if (path[store.front()][i] &amp;amp;&amp;amp; !visited[i]) {
                    store.push(i);
                    visited[i] = true;
                }
            }
            store.pop();
        }
    }
    
    cout &amp;lt;&amp;lt; count &amp;lt;&amp;lt; endl;
    
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 04 Mar 2016 00:00:00 +0800</pubDate>
        <link>/2016/03/04/sicily10/</link>
        <guid isPermaLink="true">/2016/03/04/sicily10/</guid>
        
        <category>sicily</category>
        
        <category>c++</category>
        
        
      </item>
    
      <item>
        <title>Sicily 1931. 卡片游戏</title>
        <description>&lt;ul&gt;
  &lt;li&gt;思路：
    &lt;ul&gt;
      &lt;li&gt;纯属数据结构中队列的应用，可以练练手。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具体代码如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;queue&amp;gt;
using namespace std;

int main() {
    int t;
    cin &amp;gt;&amp;gt; t;
    while (t--) {
        int num;
        cin &amp;gt;&amp;gt; num;
        queue&amp;lt;int&amp;gt; store;
        for (int i = 1; i &amp;lt;= num; i++) {
            store.push(i);
        }
        for (int i = 1; i &amp;lt;= num; i++) {
            cout &amp;lt;&amp;lt; store.front() &amp;lt;&amp;lt; &quot; &quot;;
            store.pop();
            int temp = store.front();
            store.pop();
            store.push(temp);
        }
        cout &amp;lt;&amp;lt; endl;
    }
    
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 04 Mar 2016 00:00:00 +0800</pubDate>
        <link>/2016/03/04/sicily-9/</link>
        <guid isPermaLink="true">/2016/03/04/sicily-9/</guid>
        
        <category>sicily</category>
        
        <category>c++</category>
        
        
      </item>
    
      <item>
        <title>Sicily 1021. Couples</title>
        <description>&lt;ul&gt;
  &lt;li&gt;思路：
    &lt;ul&gt;
      &lt;li&gt;想清楚了这道题其实很简单。利用夫妻出现的位置作为下标，并设为同一值，第一对夫妻值为1，第二对为2，以此类推，存储完毕即可进入下一步。&lt;/li&gt;
      &lt;li&gt;利用栈这个数据结构：遍历这个数组，当栈不为空且栈顶元素等于数组出现的元素时，pop掉栈顶元素，其余情况则入栈。循环完毕，若栈为空则为Yes，否则为No。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具体代码如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;stack&amp;gt;
using namespace std;

int main() {
    int num;
    while (cin &amp;gt;&amp;gt; num &amp;amp;&amp;amp; num) {
        int *store = new int[num*2+1];
        for (int i = 1; i &amp;lt;= num; i++) {
            int a, b;
            cin &amp;gt;&amp;gt; a &amp;gt;&amp;gt; b;
            store[a] = store[b] = i;
        }
        stack&amp;lt;int&amp;gt; st;
        for (int i = 1; i &amp;lt;= num*2; i++) {
            if (!st.empty() &amp;amp;&amp;amp; st.top() == store[i]) {
                st.pop();
            }
            else {
                st.push(store[i]);
            }
        }
        st.empty() ? cout &amp;lt;&amp;lt; &quot;Yes\n&quot; : cout &amp;lt;&amp;lt; &quot;No\n&quot;;
    }
    
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 04 Mar 2016 00:00:00 +0800</pubDate>
        <link>/2016/03/04/sicily-8/</link>
        <guid isPermaLink="true">/2016/03/04/sicily-8/</guid>
        
        <category>sicily</category>
        
        <category>c++</category>
        
        
      </item>
    
      <item>
        <title>Sicily 1129. ISBN</title>
        <description>&lt;ul&gt;
  &lt;li&gt;思路：
    &lt;ul&gt;
      &lt;li&gt;这道题比较简单，只要看懂题目就应该可以了。那就解释下题目好了，题目意思是按照权值计算这10个数字和，依据这个和计算还差多少可以对11整除，若还差10，那么在这个结尾加上“-X”，若不是10则输出“-”加上还差多少可以整除的那个数。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;具体代码如下：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
using namespace std;

int Sum(string x) {
    int sum = 0;
    int weight = 10;
    for (int i = 0; i &amp;lt; x.size(); i++) {
        if (x[i] &amp;gt;= &#39;0&#39;&amp;amp;&amp;amp;x[i] &amp;lt;= &#39;9&#39;) {
            sum += (x[i]-&#39;0&#39;)*(weight--);
        }
    }
    return sum;
}

int main() {
    string test;
    while (cin &amp;gt;&amp;gt; test) {
        int sum = Sum(test);
        int check_digit = sum%11 == 0 ? 0 : 11-sum%11;
        check_digit == 10 ? cout &amp;lt;&amp;lt; test &amp;lt;&amp;lt; &quot;-X\n&quot;
            : cout &amp;lt;&amp;lt; test &amp;lt;&amp;lt; &quot;-&quot; &amp;lt;&amp;lt; check_digit &amp;lt;&amp;lt; endl;
    }
    
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 04 Mar 2016 00:00:00 +0800</pubDate>
        <link>/2016/03/04/sicily-7/</link>
        <guid isPermaLink="true">/2016/03/04/sicily-7/</guid>
        
        <category>sicily</category>
        
        <category>c++</category>
        
        
      </item>
    
  </channel>
</rss>
